# frozen_string_literal: true

# #Yousign API Swagger
#
# For your information, the Yousign API documentation is available at https://dev.yousign.com/
#
# The version of the OpenAPI document: 2.1
# Contact: support@yousign.fr
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.4.0
#

require 'date'
require 'time'

module YousignClient
  class UserInput
    # User's firstname
    attr_accessor :firstname

    # User's lastname
    attr_accessor :lastname

    # User's email address (This field is allowed only during creation)
    attr_accessor :email

    # User's job title
    attr_accessor :title

    # User's phone number (mobiles and landline telephones are supported). Phone number must be formatted to E164 (https://en.wikipedia.org/wiki/E.164) which includes the symbol '+' and the country code. For example : +33612131315. All countries are supported.
    attr_accessor :phone

    attr_accessor :permission, :config, :notifications

    # User's UserGroup
    attr_accessor :group

    # ID of file image
    attr_accessor :default_sign_image

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        firstname          => firstname,
        lastname           => lastname,
        email              => email,
        title              => title,
        phone              => phone,
        permission         => permission,
        group              => group,
        config             => config,
        default_sign_image => :defaultSignImage,
        notifications      => notifications
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        firstname          => :String,
        lastname           => :String,
        email              => :String,
        title              => :String,
        phone              => :String,
        permission         => :'Array<String>',
        group              => :String,
        config             => :Object,
        default_sign_image => :String,
        notifications      => :UserInputNotifications
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = { })
      unless attributes.is_a?(Hash)
        raise ArgumentError, 'The input argument (attributes) must be a hash in `YousignClient::UserInput` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({ }) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError, "`#{k}` is not a valid attribute in `YousignClient::UserInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:firstname)
        self.firstname = attributes[:firstname]
      end

      if attributes.key?(:lastname)
        self.lastname = attributes[:lastname]
      end

      if attributes.key?(:email)
        self.email = attributes[:email]
      end

      if attributes.key?(:title)
        self.title = attributes[:title]
      end

      if attributes.key?(:phone)
        self.phone = attributes[:phone]
      end

      if attributes.key?(:permission)
        if (value = attributes[:permission]).is_a?(Array)
          self.permission = value
        end
      end

      if attributes.key?(:group)
        self.group = attributes[:group]
      end

      if attributes.key?(:config)
        self.config = attributes[:config]
      end

      if attributes.key?(:default_sign_image)
        self.default_sign_image = attributes[:default_sign_image]
      end

      if attributes.key?(:notifications)
        self.notifications = attributes[:notifications]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      if @firstname.nil?
        invalid_properties.push('invalid value for "firstname", firstname cannot be nil.')
      end

      if @lastname.nil?
        invalid_properties.push('invalid value for "lastname", lastname cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      pattern = Regexp.new(%r{^/user_groups/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})
      if !@group.nil? && @group !~ pattern
        invalid_properties.push("invalid value for \"group\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(%r{^/files/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})
      if !@default_sign_image.nil? && @default_sign_image !~ pattern
        invalid_properties.push("invalid value for \"default_sign_image\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @firstname.nil?
      return false if @lastname.nil?
      return false if @email.nil?
      return false if !@group.nil? && @group !~ Regexp.new(%r{^/user_groups/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})
      return false if !@default_sign_image.nil? && @default_sign_image !~ Regexp.new(%r{^/files/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group Value to be assigned
    def group=(group)
      pattern = Regexp.new(%r{^/user_groups/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})
      if !group.nil? && group !~ pattern
        raise ArgumentError, "invalid value for \"group\", must conform to the pattern #{pattern}."
      end

      @group = group
    end

    # Custom attribute writer method with validation
    # @param [Object] default_sign_image Value to be assigned
    def default_sign_image=(default_sign_image)
      pattern = Regexp.new(%r{^/files/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})
      if !default_sign_image.nil? && default_sign_image !~ pattern
        raise ArgumentError, "invalid value for \"default_sign_image\", must conform to the pattern #{pattern}."
      end

      @default_sign_image = default_sign_image
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        firstname == other.firstname &&
        lastname == other.lastname &&
        email == other.email &&
        title == other.title &&
        phone == other.phone &&
        permission == other.permission &&
        group == other.group &&
        config == other.config &&
        default_sign_image == other.default_sign_image &&
        notifications == other.notifications
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [firstname, lastname, email, title, phone, permission, group, config, default_sign_image, notifications].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        { }.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = YousignClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = { }
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        { }.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
