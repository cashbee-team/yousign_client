# frozen_string_literal: true

# #Yousign API Swagger
#
# For your information, the Yousign API documentation is available at https://dev.yousign.com/
#
# The version of the OpenAPI document: 2.1
# Contact: support@yousign.fr
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.4.0
#

require 'date'
require 'time'

module YousignClient
  class OrganizationOutput
    # Organization ID
    attr_accessor :id

    # Organization name
    attr_accessor :name

    # Custom URL for the Organization (internal usage only, should not be used)
    attr_accessor :url

    # Created date of the object
    attr_accessor :created_at

    # Updated date of the object
    attr_accessor :updated_at

    # Internal usage, should not be used
    attr_accessor :f_sso

    # Internal usage, should not be used
    attr_accessor :max_users

    # Defined if the organization anable the related files
    attr_accessor :procedure_related_files_enable

    attr_accessor :subscriptions, :billing_address

    # Internal usage, should not be used
    attr_accessor :auto_collection

    # Internal usage, should not be used
    attr_accessor :vat_number

    # Internal usage, should not be used
    attr_accessor :in_app_support

    # Internal usage, should not be used
    attr_accessor :in_app_updates

    # Internal usage, should not be used
    attr_accessor :file_template

    # Internal usage, should not be used
    attr_accessor :f_archive

    # Internal usage, should not be used
    attr_accessor :f_user_permissions

    # Internal usage, should not be used
    attr_accessor :f_procedure_template

    # Internal usage, should not be used
    attr_accessor :f_procedure_reminder_auto

    # Internal usage, should not be used
    attr_accessor :f_api

    # Internal usage, should not be used
    attr_accessor :f_checkdocument

    # Internal usage, should not be used
    attr_accessor :f_procedure_create

    # Internal usage, should not be used
    attr_accessor :f_signature_ui

    # Internal usage, should not be used
    attr_accessor :f_server_stamp

    # Internal usage, should not be used
    attr_accessor :f_operation_level_none

    # Internal usage, should not be used
    attr_accessor :f_consent_process

    # Internal usage, should not be used
    attr_accessor :f_operation_level_advanced

    # Internal usage, should not be used
    attr_accessor :f_operation_custom_mode_email

    # Internal usage, should not be used
    attr_accessor :f_dynamic_fields

    # Internal usage, should not be used
    attr_accessor :saml_identity_provider

    # Pattern of the password policy for the organization
    attr_accessor :password_policy_pattern

    # Description for the password policy
    attr_accessor :password_policy_description

    # Internal usage, should not be used
    attr_accessor :user_activation

    # Internal usage, should not be used
    attr_accessor :f_procedure_template_permissions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id                               => id,
        name                             => name,
        url                              => url,
        created_at                       => :createdAt,
        updated_at                       => :updatedAt,
        f_sso                            => :fSso,
        max_users                        => :maxUsers,
        procedure_related_files_enable   => :procedureRelatedFilesEnable,
        subscriptions                    => subscriptions,
        auto_collection                  => :autoCollection,
        vat_number                       => :vatNumber,
        billing_address                  => :billingAddress,
        in_app_support                   => :inAppSupport,
        in_app_updates                   => :inAppUpdates,
        file_template                    => :fileTemplate,
        f_archive                        => :fArchive,
        f_user_permissions               => :fUserPermissions,
        f_procedure_template             => :fProcedureTemplate,
        f_procedure_reminder_auto        => :fProcedureReminderAuto,
        f_api                            => :fApi,
        f_checkdocument                  => :fCheckdocument,
        f_procedure_create               => :fProcedureCreate,
        f_signature_ui                   => :fSignatureUi,
        f_server_stamp                   => :fServerStamp,
        f_operation_level_none           => :fOperationLevelNone,
        f_consent_process                => :fConsentProcess,
        f_operation_level_advanced       => :fOperationLevelAdvanced,
        f_operation_custom_mode_email    => :fOperationCustomModeEmail,
        f_dynamic_fields                 => :fDynamicFields,
        saml_identity_provider           => :samlIdentityProvider,
        password_policy_pattern          => :passwordPolicyPattern,
        password_policy_description      => :passwordPolicyDescription,
        user_activation                  => :userActivation,
        f_procedure_template_permissions => :fProcedureTemplatePermissions
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id                               => :String,
        name                             => :String,
        url                              => :String,
        created_at                       => :Time,
        updated_at                       => :Time,
        f_sso                            => :Boolean,
        max_users                        => :Float,
        procedure_related_files_enable   => :Boolean,
        subscriptions                    => :'Array<String>',
        auto_collection                  => :Boolean,
        vat_number                       => :String,
        billing_address                  => :OrganizationBillingAddress,
        in_app_support                   => :Boolean,
        in_app_updates                   => :String,
        file_template                    => :Boolean,
        f_archive                        => :Boolean,
        f_user_permissions               => :Boolean,
        f_procedure_template             => :Boolean,
        f_procedure_reminder_auto        => :Boolean,
        f_api                            => :Boolean,
        f_checkdocument                  => :Boolean,
        f_procedure_create               => :Boolean,
        f_signature_ui                   => :Boolean,
        f_server_stamp                   => :Boolean,
        f_operation_level_none           => :Boolean,
        f_consent_process                => :Boolean,
        f_operation_level_advanced       => :Boolean,
        f_operation_custom_mode_email    => :Boolean,
        f_dynamic_fields                 => :Boolean,
        saml_identity_provider           => :String,
        password_policy_pattern          => :String,
        password_policy_description      => :String,
        user_activation                  => :Boolean,
        f_procedure_template_permissions => :Boolean
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = { })
      unless attributes.is_a?(Hash)
        raise ArgumentError, 'The input argument (attributes) must be a hash in `YousignClient::OrganizationOutput` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({ }) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError, "`#{k}` is not a valid attribute in `YousignClient::OrganizationOutput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:id)
        self.id = attributes[:id]
      end

      if attributes.key?(:name)
        self.name = attributes[:name]
      end

      if attributes.key?(:url)
        self.url = attributes[:url]
      end

      if attributes.key?(:created_at)
        self.created_at = attributes[:created_at]
      end

      if attributes.key?(:updated_at)
        self.updated_at = attributes[:updated_at]
      end

      if attributes.key?(:f_sso)
        self.f_sso = attributes[:f_sso]
      end

      if attributes.key?(:max_users)
        self.max_users = attributes[:max_users]
      end

      if attributes.key?(:procedure_related_files_enable)
        self.procedure_related_files_enable = attributes[:procedure_related_files_enable]
      end

      if attributes.key?(:subscriptions)
        if (value = attributes[:subscriptions]).is_a?(Array)
          self.subscriptions = value
        end
      end

      if attributes.key?(:auto_collection)
        self.auto_collection = attributes[:auto_collection]
      end

      if attributes.key?(:vat_number)
        self.vat_number = attributes[:vat_number]
      end

      if attributes.key?(:billing_address)
        self.billing_address = attributes[:billing_address]
      end

      if attributes.key?(:in_app_support)
        self.in_app_support = attributes[:in_app_support]
      end

      if attributes.key?(:in_app_updates)
        self.in_app_updates = attributes[:in_app_updates]
      end

      if attributes.key?(:file_template)
        self.file_template = attributes[:file_template]
      end

      if attributes.key?(:f_archive)
        self.f_archive = attributes[:f_archive]
      end

      if attributes.key?(:f_user_permissions)
        self.f_user_permissions = attributes[:f_user_permissions]
      end

      if attributes.key?(:f_procedure_template)
        self.f_procedure_template = attributes[:f_procedure_template]
      end

      if attributes.key?(:f_procedure_reminder_auto)
        self.f_procedure_reminder_auto = attributes[:f_procedure_reminder_auto]
      end

      if attributes.key?(:f_api)
        self.f_api = attributes[:f_api]
      end

      if attributes.key?(:f_checkdocument)
        self.f_checkdocument = attributes[:f_checkdocument]
      end

      if attributes.key?(:f_procedure_create)
        self.f_procedure_create = attributes[:f_procedure_create]
      end

      if attributes.key?(:f_signature_ui)
        self.f_signature_ui = attributes[:f_signature_ui]
      end

      if attributes.key?(:f_server_stamp)
        self.f_server_stamp = attributes[:f_server_stamp]
      end

      if attributes.key?(:f_operation_level_none)
        self.f_operation_level_none = attributes[:f_operation_level_none]
      end

      if attributes.key?(:f_consent_process)
        self.f_consent_process = attributes[:f_consent_process]
      end

      if attributes.key?(:f_operation_level_advanced)
        self.f_operation_level_advanced = attributes[:f_operation_level_advanced]
      end

      if attributes.key?(:f_operation_custom_mode_email)
        self.f_operation_custom_mode_email = attributes[:f_operation_custom_mode_email]
      end

      if attributes.key?(:f_dynamic_fields)
        self.f_dynamic_fields = attributes[:f_dynamic_fields]
      end

      if attributes.key?(:saml_identity_provider)
        self.saml_identity_provider = attributes[:saml_identity_provider]
      end

      if attributes.key?(:password_policy_pattern)
        self.password_policy_pattern = attributes[:password_policy_pattern]
      end

      if attributes.key?(:password_policy_description)
        self.password_policy_description = attributes[:password_policy_description]
      end

      if attributes.key?(:user_activation)
        self.user_activation = attributes[:user_activation]
      end

      if attributes.key?(:f_procedure_template_permissions)
        self.f_procedure_template_permissions = attributes[:f_procedure_template_permissions]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        url == other.url &&
        created_at == other.created_at &&
        updated_at == other.updated_at &&
        f_sso == other.f_sso &&
        max_users == other.max_users &&
        procedure_related_files_enable == other.procedure_related_files_enable &&
        subscriptions == other.subscriptions &&
        auto_collection == other.auto_collection &&
        vat_number == other.vat_number &&
        billing_address == other.billing_address &&
        in_app_support == other.in_app_support &&
        in_app_updates == other.in_app_updates &&
        file_template == other.file_template &&
        f_archive == other.f_archive &&
        f_user_permissions == other.f_user_permissions &&
        f_procedure_template == other.f_procedure_template &&
        f_procedure_reminder_auto == other.f_procedure_reminder_auto &&
        f_api == other.f_api &&
        f_checkdocument == other.f_checkdocument &&
        f_procedure_create == other.f_procedure_create &&
        f_signature_ui == other.f_signature_ui &&
        f_server_stamp == other.f_server_stamp &&
        f_operation_level_none == other.f_operation_level_none &&
        f_consent_process == other.f_consent_process &&
        f_operation_level_advanced == other.f_operation_level_advanced &&
        f_operation_custom_mode_email == other.f_operation_custom_mode_email &&
        f_dynamic_fields == other.f_dynamic_fields &&
        saml_identity_provider == other.saml_identity_provider &&
        password_policy_pattern == other.password_policy_pattern &&
        password_policy_description == other.password_policy_description &&
        user_activation == other.user_activation &&
        f_procedure_template_permissions == other.f_procedure_template_permissions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, url, created_at, updated_at, f_sso, max_users, procedure_related_files_enable, subscriptions, auto_collection, vat_number, billing_address, in_app_support, in_app_updates, file_template, f_archive, f_user_permissions, f_procedure_template, f_procedure_reminder_auto, f_api, f_checkdocument, f_procedure_create, f_signature_ui, f_server_stamp, f_operation_level_none, f_consent_process, f_operation_level_advanced, f_operation_custom_mode_email, f_dynamic_fields, saml_identity_provider, password_policy_pattern, password_policy_description, user_activation, f_procedure_template_permissions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        { }.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = YousignClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = { }
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        { }.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
