=begin
#Yousign API Swagger

#For your information, the Yousign API documentation is available at https://dev.yousign.com/

OpenAPI spec version: 2.1
Contact: support@yousign.fr
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module YousignClient
  class ProcedureOutput
    # Id of the object
    attr_accessor :id

    # Name of procedure
    attr_accessor :name

    # Description of procedure
    attr_accessor :description

    # Created date of the object
    attr_accessor :created_at

    # Updated date of the object
    attr_accessor :updated_at

    # Finished date of the object
    attr_accessor :finished_at

    # Expiration date. The procedure will be out of usage after this date.
    attr_accessor :expires_at

    # Status of the procedure
    attr_accessor :status

    # Id of creator of the object
    attr_accessor :creator

    # The creator's first name
    attr_accessor :creator_first_name

    # The creator's last name
    attr_accessor :creator_last_name

    # Id of workspace creator of the object
    attr_accessor :workspace

    # Defines if the procedure is a template (if true). A template could be used by a procedure to get all properties of the template. Check parent parameter for more information.
    attr_accessor :template

    # Defines an order for the procedure process. If true, position of each member will be used to define the validation workflow.
    attr_accessor :ordered

    # Id of a procedure template used to get all properties of the template in the new procedure. If you set other properties, they will be replaced. If you donâ€™t set other properties, all properties will be cloned.
    attr_accessor :parent

    attr_accessor :metadata

    attr_accessor :config

    attr_accessor :members

    # List of files used in the procedure.
    attr_accessor :files

    # Defines if related files are available.
    attr_accessor :related_files_enable

    # Defines if the files of the procedure must be archived (Workspace should be allowed)
    attr_accessor :archive

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'description' => :'description',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'finished_at' => :'finishedAt',
        :'expires_at' => :'expiresAt',
        :'status' => :'status',
        :'creator' => :'creator',
        :'creator_first_name' => :'creatorFirstName',
        :'creator_last_name' => :'creatorLastName',
        :'workspace' => :'workspace',
        :'template' => :'template',
        :'ordered' => :'ordered',
        :'parent' => :'parent',
        :'metadata' => :'metadata',
        :'config' => :'config',
        :'members' => :'members',
        :'files' => :'files',
        :'related_files_enable' => :'relatedFilesEnable',
        :'archive' => :'archive'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'created_at' => :'DateTime',
        :'updated_at' => :'DateTime',
        :'finished_at' => :'DateTime',
        :'expires_at' => :'DateTime',
        :'status' => :'String',
        :'creator' => :'String',
        :'creator_first_name' => :'String',
        :'creator_last_name' => :'String',
        :'workspace' => :'String',
        :'template' => :'BOOLEAN',
        :'ordered' => :'BOOLEAN',
        :'parent' => :'String',
        :'metadata' => :'ProcedureOutputMetadata',
        :'config' => :'ProcedureConfig',
        :'members' => :'Array<MemberOutput>',
        :'files' => :'Array<FileOutput>',
        :'related_files_enable' => :'BOOLEAN',
        :'archive' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'finishedAt')
        self.finished_at = attributes[:'finishedAt']
      end

      if attributes.has_key?(:'expiresAt')
        self.expires_at = attributes[:'expiresAt']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'creator')
        self.creator = attributes[:'creator']
      end

      if attributes.has_key?(:'creatorFirstName')
        self.creator_first_name = attributes[:'creatorFirstName']
      end

      if attributes.has_key?(:'creatorLastName')
        self.creator_last_name = attributes[:'creatorLastName']
      end

      if attributes.has_key?(:'workspace')
        self.workspace = attributes[:'workspace']
      end

      if attributes.has_key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.has_key?(:'ordered')
        self.ordered = attributes[:'ordered']
      end

      if attributes.has_key?(:'parent')
        self.parent = attributes[:'parent']
      end

      if attributes.has_key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.has_key?(:'config')
        self.config = attributes[:'config']
      end

      if attributes.has_key?(:'members')
        if (value = attributes[:'members']).is_a?(Array)
          self.members = value
        end
      end

      if attributes.has_key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end

      if attributes.has_key?(:'relatedFilesEnable')
        self.related_files_enable = attributes[:'relatedFilesEnable']
      end

      if attributes.has_key?(:'archive')
        self.archive = attributes[:'archive']
      else
        self.archive = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['draft', 'active', 'finished', 'expired', 'refused'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['draft', 'active', 'finished', 'expired', 'refused'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          description == o.description &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          finished_at == o.finished_at &&
          expires_at == o.expires_at &&
          status == o.status &&
          creator == o.creator &&
          creator_first_name == o.creator_first_name &&
          creator_last_name == o.creator_last_name &&
          workspace == o.workspace &&
          template == o.template &&
          ordered == o.ordered &&
          parent == o.parent &&
          metadata == o.metadata &&
          config == o.config &&
          members == o.members &&
          files == o.files &&
          related_files_enable == o.related_files_enable &&
          archive == o.archive
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, description, created_at, updated_at, finished_at, expires_at, status, creator, creator_first_name, creator_last_name, workspace, template, ordered, parent, metadata, config, members, files, related_files_enable, archive].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = YousignClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
