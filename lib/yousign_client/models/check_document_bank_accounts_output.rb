# frozen_string_literal: true

# #Yousign API Swagger
#
# For your information, the Yousign API documentation is available at https://dev.yousign.com/
#
# The version of the OpenAPI document: 2.1
# Contact: support@yousign.fr
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.4.0
#

require 'date'
require 'time'

module YousignClient
  class CheckDocumentBankAccountsOutput
    # Id of the object
    attr_accessor :id

    # Created date of the object
    attr_accessor :created_at

    # Updated date of the object
    attr_accessor :updated_at

    # Firstname to check on document
    attr_accessor :first_name

    # Birth name to check on document
    attr_accessor :birth_name

    # Lastname to check on document
    attr_accessor :last_name

    # Iban to check on document
    attr_accessor :iban

    # Company name to check on document
    attr_accessor :company_name

    # Type of document
    attr_accessor :document_type

    # Workspace creator of the object
    attr_accessor :workspace

    # Creator of the object
    attr_accessor :creator

    # Extracted iban on the document
    attr_accessor :extracted_iban

    # Defines if one firstname sent in the input is valid
    attr_accessor :first_name_valid

    # Defines if birth name sent in the input is valid
    attr_accessor :birth_name_valid

    # Defines if lastname sent in the input is valid
    attr_accessor :last_name_valid

    # Defines if company name sent in the input is valid
    attr_accessor :company_name_valid

    # Defines if iban sent in the input is valid
    attr_accessor :iban_valid

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id                 => id,
        created_at         => :createdAt,
        updated_at         => :updatedAt,
        first_name         => :firstName,
        birth_name         => :birthName,
        last_name          => :lastName,
        iban               => iban,
        company_name       => :companyName,
        document_type      => :documentType,
        workspace          => workspace,
        creator            => creator,
        extracted_iban     => :extractedIban,
        first_name_valid   => :firstNameValid,
        birth_name_valid   => :birthNameValid,
        last_name_valid    => :lastNameValid,
        company_name_valid => :companyNameValid,
        iban_valid         => :ibanValid
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id                 => :String,
        created_at         => :Time,
        updated_at         => :Time,
        first_name         => :String,
        birth_name         => :String,
        last_name          => :String,
        iban               => :String,
        company_name       => :String,
        document_type      => :String,
        workspace          => :String,
        creator            => :String,
        extracted_iban     => :String,
        first_name_valid   => :Boolean,
        birth_name_valid   => :Boolean,
        last_name_valid    => :Boolean,
        company_name_valid => :Boolean,
        iban_valid         => :Boolean
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = { })
      unless attributes.is_a?(Hash)
        raise ArgumentError, 'The input argument (attributes) must be a hash in `YousignClient::CheckDocumentBankAccountsOutput` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({ }) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError, "`#{k}` is not a valid attribute in `YousignClient::CheckDocumentBankAccountsOutput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:id)
        self.id = attributes[:id]
      end

      if attributes.key?(:created_at)
        self.created_at = attributes[:created_at]
      end

      if attributes.key?(:updated_at)
        self.updated_at = attributes[:updated_at]
      end

      if attributes.key?(:first_name)
        self.first_name = attributes[:first_name]
      end

      if attributes.key?(:birth_name)
        self.birth_name = attributes[:birth_name]
      end

      if attributes.key?(:last_name)
        self.last_name = attributes[:last_name]
      end

      if attributes.key?(:iban)
        self.iban = attributes[:iban]
      end

      if attributes.key?(:company_name)
        self.company_name = attributes[:company_name]
      end

      if attributes.key?(:document_type)
        self.document_type = attributes[:document_type]
      end

      if attributes.key?(:workspace)
        self.workspace = attributes[:workspace]
      end

      if attributes.key?(:creator)
        self.creator = attributes[:creator]
      end

      if attributes.key?(:extracted_iban)
        self.extracted_iban = attributes[:extracted_iban]
      end

      if attributes.key?(:first_name_valid)
        self.first_name_valid = attributes[:first_name_valid]
      end

      if attributes.key?(:birth_name_valid)
        self.birth_name_valid = attributes[:birth_name_valid]
      end

      if attributes.key?(:last_name_valid)
        self.last_name_valid = attributes[:last_name_valid]
      end

      if attributes.key?(:company_name_valid)
        self.company_name_valid = attributes[:company_name_valid]
      end

      if attributes.key?(:iban_valid)
        self.iban_valid = attributes[:iban_valid]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      document_type_validator = EnumAttributeValidator.new('String', ['RIB'])
      return false unless document_type_validator.valid?(@document_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_type Object to be assigned
    def document_type=(document_type)
      validator = EnumAttributeValidator.new('String', ['RIB'])
      unless validator.valid?(document_type)
        raise ArgumentError, "invalid value for \"document_type\", must be one of #{validator.allowable_values}."
      end

      @document_type = document_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        created_at == other.created_at &&
        updated_at == other.updated_at &&
        first_name == other.first_name &&
        birth_name == other.birth_name &&
        last_name == other.last_name &&
        iban == other.iban &&
        company_name == other.company_name &&
        document_type == other.document_type &&
        workspace == other.workspace &&
        creator == other.creator &&
        extracted_iban == other.extracted_iban &&
        first_name_valid == other.first_name_valid &&
        birth_name_valid == other.birth_name_valid &&
        last_name_valid == other.last_name_valid &&
        company_name_valid == other.company_name_valid &&
        iban_valid == other.iban_valid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, updated_at, first_name, birth_name, last_name, iban, company_name, document_type, workspace, creator, extracted_iban, first_name_valid, birth_name_valid, last_name_valid, company_name_valid, iban_valid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        { }.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = YousignClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = { }
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        { }.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
