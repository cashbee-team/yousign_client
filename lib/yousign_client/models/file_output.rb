# frozen_string_literal: true

# #Yousign API Swagger
#
# For your information, the Yousign API documentation is available at https://dev.yousign.com/
#
# The version of the OpenAPI document: 2.1
# Contact: support@yousign.fr
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.4.0
#

require 'date'
require 'time'

module YousignClient
  class FileOutput
    # Id of the object
    attr_accessor :id

    # Name of the file
    attr_accessor :name

    # Type of file
    attr_accessor :type

    # Type of content
    attr_accessor :content_type

    # Description of the file
    attr_accessor :description

    # Created date of the object
    attr_accessor :created_at

    # Updated date of the object
    attr_accessor :updated_at

    attr_accessor :metadata, :position

    # Id of workspace
    attr_accessor :workspace

    # Id of creator
    attr_accessor :creator

    # File hash
    attr_accessor :sha256

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id           => id,
        name         => name,
        type         => type,
        content_type => :contentType,
        description  => description,
        created_at   => :createdAt,
        updated_at   => :updatedAt,
        metadata     => metadata,
        workspace    => workspace,
        creator      => creator,
        sha256       => sha256,
        position     => position
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id           => :String,
        name         => :String,
        type         => :String,
        content_type => :String,
        description  => :String,
        created_at   => :String,
        updated_at   => :String,
        metadata     => :FileInputMetadata,
        workspace    => :String,
        creator      => :String,
        sha256       => :String,
        position     => :Integer
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = { })
      unless attributes.is_a?(Hash)
        raise ArgumentError, 'The input argument (attributes) must be a hash in `YousignClient::FileOutput` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({ }) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError, "`#{k}` is not a valid attribute in `YousignClient::FileOutput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:id)
        self.id = attributes[:id]
      end

      if attributes.key?(:name)
        self.name = attributes[:name]
      end

      if attributes.key?(:type)
        self.type = attributes[:type]
      end

      if attributes.key?(:content_type)
        self.content_type = attributes[:content_type]
      end

      if attributes.key?(:description)
        self.description = attributes[:description]
      end

      if attributes.key?(:created_at)
        self.created_at = attributes[:created_at]
      end

      if attributes.key?(:updated_at)
        self.updated_at = attributes[:updated_at]
      end

      if attributes.key?(:metadata)
        self.metadata = attributes[:metadata]
      end

      if attributes.key?(:workspace)
        self.workspace = attributes[:workspace]
      end

      if attributes.key?(:creator)
        self.creator = attributes[:creator]
      end

      if attributes.key?(:sha256)
        self.sha256 = attributes[:sha256]
      end

      self.position = if attributes.key?(:position)
                        attributes[:position]
                      else
                        0
        end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      pattern = Regexp.new(%r{^/workspaces/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})
      if !@workspace.nil? && @workspace !~ pattern
        invalid_properties.push("invalid value for \"workspace\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', %w[signable sign_image attachment])
      return false unless type_validator.valid?(@type)
      return false if !@workspace.nil? && @workspace !~ Regexp.new(%r{^/workspaces/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', %w[signable sign_image attachment])
      unless validator.valid?(type)
        raise ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] workspace Value to be assigned
    def workspace=(workspace)
      pattern = Regexp.new(%r{^/workspaces/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$})
      if !workspace.nil? && workspace !~ pattern
        raise ArgumentError, "invalid value for \"workspace\", must conform to the pattern #{pattern}."
      end

      @workspace = workspace
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        type == other.type &&
        content_type == other.content_type &&
        description == other.description &&
        created_at == other.created_at &&
        updated_at == other.updated_at &&
        metadata == other.metadata &&
        workspace == other.workspace &&
        creator == other.creator &&
        sha256 == other.sha256 &&
        position == other.position
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, type, content_type, description, created_at, updated_at, metadata, workspace, creator, sha256, position].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        { }.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = YousignClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = { }
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        { }.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
