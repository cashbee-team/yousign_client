# frozen_string_literal: true

# #Yousign API Swagger
#
# For your information, the Yousign API documentation is available at https://dev.yousign.com/
#
# The version of the OpenAPI document: 2.1
# Contact: support@yousign.fr
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.4.0
#

require 'date'
require 'time'

module YousignClient
  class FileObjectInput
    # File id reference
    attr_accessor :file

    # Page of the visible signature. This property is ignored if fieldName is set.  If you want a visible signature, you must set page, position and fieldName.
    attr_accessor :page

    # Coordinates of the signature image to set. Format is : \"llx,lly,urx,ury\". llx=left lower x coordinate, lly=left lower y coordinate, urx=upper right x coordinate, ury = upper right y coordinate. To get easily coordinates, you could use this tool : http://placeit.yousign.fr
    attr_accessor :position

    # [type=signature] Name of the signature field existing in the document, it will be not used on the signature image.
    attr_accessor :field_name

    # [type=signature] Text associated above the signature image.  You can use some variable inside : {{date.en}} {{date.fr}} {{time.en}} {{time.fr}} that it will be parsed to show the date of the signature.
    attr_accessor :mention

    # [type=signature] Text associated below the signature image. (internal usage only, should not be used).  You can use some variable inside : {{date.en}} {{date.fr}} {{time.en}} {{time.fr}} that it will be parsed to show the date of the signature.
    attr_accessor :mention2

    # Member id reference
    attr_accessor :member

    # [type=signature] The reason they are signing the agreement
    attr_accessor :reason

    # The type of the file object
    attr_accessor :type

    # [type=text] Indicate if the member must fill or not the field
    attr_accessor :content_required

    # [type=text] The content of the field. Could be used for placeholder
    attr_accessor :content

    # [type=text] The font familly used to render the TextField. Currently only the default value will be used.
    attr_accessor :font_family

    # [type=text] The font size used to render the field. Currently only the default value will be used.
    attr_accessor :font_size

    # [type=text] The font color used to render the field.
    attr_accessor :font_color

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        file             => file,
        page             => page,
        position         => position,
        field_name       => :fieldName,
        mention          => mention,
        mention2         => mention2,
        member           => member,
        reason           => reason,
        type             => type,
        content_required => :contentRequired,
        content          => content,
        font_family      => :fontFamily,
        font_size        => :fontSize,
        font_color       => :fontColor
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        file             => :String,
        page             => :Integer,
        position         => :String,
        field_name       => :String,
        mention          => :String,
        mention2         => :String,
        member           => :String,
        reason           => :String,
        type             => :String,
        content_required => :Boolean,
        content          => :String,
        font_family      => :String,
        font_size        => :Integer,
        font_color       => :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = { })
      unless attributes.is_a?(Hash)
        raise ArgumentError, 'The input argument (attributes) must be a hash in `YousignClient::FileObjectInput` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({ }) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError, "`#{k}` is not a valid attribute in `YousignClient::FileObjectInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:file)
        self.file = attributes[:file]
      end

      if attributes.key?(:page)
        self.page = attributes[:page]
      end

      if attributes.key?(:position)
        self.position = attributes[:position]
      end

      if attributes.key?(:field_name)
        self.field_name = attributes[:field_name]
      end

      if attributes.key?(:mention)
        self.mention = attributes[:mention]
      end

      if attributes.key?(:mention2)
        self.mention2 = attributes[:mention2]
      end

      if attributes.key?(:member)
        self.member = attributes[:member]
      end

      self.reason = if attributes.key?(:reason)
                      attributes[:reason]
                    else
                      'Signed by Yousign'
        end

      self.type = if attributes.key?(:type)
                    attributes[:type]
                  else
                    'signature'
        end

      self.content_required = if attributes.key?(:content_required)
                                attributes[:content_required]
                              else
                                false
        end

      if attributes.key?(:content)
        self.content = attributes[:content]
      end

      self.font_family = if attributes.key?(:font_family)
                           attributes[:font_family]
                         else
                           'raleway'
        end

      self.font_size = if attributes.key?(:font_size)
                         attributes[:font_size]
                       else
                         12
        end

      if attributes.key?(:font_color)
        self.font_color = attributes[:font_color]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      if @file.nil?
        invalid_properties.push('invalid value for "file", file cannot be nil.')
      end

      if !@content.nil? && @content.to_s.length > 255
        invalid_properties.push('invalid value for "content", the character length must be smaller than or equal to 255.')
      end

      if !@font_size.nil? && @font_size > 20
        invalid_properties.push('invalid value for "font_size", must be smaller than or equal to 20.')
      end

      if !@font_size.nil? && @font_size < 6
        invalid_properties.push('invalid value for "font_size", must be greater than or equal to 6.')
      end

      pattern = Regexp.new(/^(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d)$/)
      if !@font_color.nil? && @font_color !~ pattern
        invalid_properties.push("invalid value for \"font_color\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @file.nil?

      type_validator = EnumAttributeValidator.new('String', %w[signature text])
      return false unless type_validator.valid?(@type)
      return false if !@content.nil? && @content.to_s.length > 255

      font_family_validator = EnumAttributeValidator.new('String', ['raleway'])
      return false unless font_family_validator.valid?(@font_family)
      return false if !@font_size.nil? && @font_size > 20
      return false if !@font_size.nil? && @font_size < 6
      return false if !@font_color.nil? && @font_color !~ Regexp.new(/^(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d)$/)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', %w[signature text])
      unless validator.valid?(type)
        raise ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] content Value to be assigned
    def content=(content)
      if !content.nil? && content.to_s.length > 255
        raise ArgumentError, 'invalid value for "content", the character length must be smaller than or equal to 255.'
      end

      @content = content
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] font_family Object to be assigned
    def font_family=(font_family)
      validator = EnumAttributeValidator.new('String', ['raleway'])
      unless validator.valid?(font_family)
        raise ArgumentError, "invalid value for \"font_family\", must be one of #{validator.allowable_values}."
      end

      @font_family = font_family
    end

    # Custom attribute writer method with validation
    # @param [Object] font_size Value to be assigned
    def font_size=(font_size)
      if !font_size.nil? && font_size > 20
        raise ArgumentError, 'invalid value for "font_size", must be smaller than or equal to 20.'
      end

      if !font_size.nil? && font_size < 6
        raise ArgumentError, 'invalid value for "font_size", must be greater than or equal to 6.'
      end

      @font_size = font_size
    end

    # Custom attribute writer method with validation
    # @param [Object] font_color Value to be assigned
    def font_color=(font_color)
      pattern = Regexp.new(/^(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d)$/)
      if !font_color.nil? && font_color !~ pattern
        raise ArgumentError, "invalid value for \"font_color\", must conform to the pattern #{pattern}."
      end

      @font_color = font_color
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        file == other.file &&
        page == other.page &&
        position == other.position &&
        field_name == other.field_name &&
        mention == other.mention &&
        mention2 == other.mention2 &&
        member == other.member &&
        reason == other.reason &&
        type == other.type &&
        content_required == other.content_required &&
        content == other.content &&
        font_family == other.font_family &&
        font_size == other.font_size &&
        font_color == other.font_color
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [file, page, position, field_name, mention, mention2, member, reason, type, content_required, content, font_family, font_size, font_color].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        { }.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = YousignClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = { }
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        { }.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
