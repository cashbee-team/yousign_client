# frozen_string_literal: true

# #Yousign API Swagger
#
# For your information, the Yousign API documentation is available at https://dev.yousign.com/
#
# The version of the OpenAPI document: 2.1
# Contact: support@yousign.fr
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.4.0
#

require 'cgi'

module YousignClient
  class ProceduresApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Export Procedure list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Return Procedure list based on the status for each Procedure
    # @option opts [String] :name Filter by name (contains)
    # @option opts [String] :members_firstname Filter by member firstname (contains)
    # @option opts [String] :members_lastname Filter by member lastname (contains)
    # @option opts [String] :members_phone Filter by member phone (contains)
    # @option opts [String] :members_email Filter by member email (contains)
    # @option opts [String] :files_name Filter by file name (contains)
    # @option opts [Array<Date>] :created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [String] :order_created_at Order by attribut
    # @return [String]
    def export_procedures_get(opts = { })
      data, _status_code, _headers = export_procedures_get_with_http_info(opts)
      data
    end

    # Export Procedure list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Return Procedure list based on the status for each Procedure
    # @option opts [String] :name Filter by name (contains)
    # @option opts [String] :members_firstname Filter by member firstname (contains)
    # @option opts [String] :members_lastname Filter by member lastname (contains)
    # @option opts [String] :members_phone Filter by member phone (contains)
    # @option opts [String] :members_email Filter by member email (contains)
    # @option opts [String] :files_name Filter by file name (contains)
    # @option opts [Array<Date>] :created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [String] :order_created_at Order by attribut
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def export_procedures_get_with_http_info(opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.export_procedures_get ...'
      end
      allowable_values = %w[active finished expired refused draft]
      if @api_client.config.client_side_validation && opts[:status] && !allowable_values.include?(opts[:status])
        raise ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order_created_at] && !allowable_values.include?(opts[:order_created_at])
        raise ArgumentError, "invalid value for \"order_created_at\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/export/procedures'

      # query parameters
      query_params = opts[:query_params] || { }
      query_params[:status] = opts[:status] unless opts[:status].nil?
      query_params[:name] = opts[:name] unless opts[:name].nil?
      query_params[:'members.firstname'] = opts[:members_firstname] unless opts[:members_firstname].nil?
      query_params[:'members.lastname'] = opts[:members_lastname] unless opts[:members_lastname].nil?
      query_params[:'members.phone'] = opts[:members_phone] unless opts[:members_phone].nil?
      query_params[:'members.email'] = opts[:members_email] unless opts[:members_email].nil?
      query_params[:'files.name'] = opts[:files_name] unless opts[:files_name].nil?
      query_params[:createdAt] = @api_client.build_collection_param(opts[:created_at], :csv) unless opts[:created_at].nil?
      query_params[:updatedAt] = @api_client.build_collection_param(opts[:updated_at], :csv) unless opts[:updated_at].nil?
      query_params[:expiresAt] = @api_client.build_collection_param(opts[:expires_at], :csv) unless opts[:expires_at].nil?
      query_params[:deletedAt] = @api_client.build_collection_param(opts[:deleted_at], :csv) unless opts[:deleted_at].nil?
      query_params[:'order[createdAt]'] = opts[:order_created_at] unless opts[:order_created_at].nil?

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.export_procedures_get',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#export_procedures_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Procedure list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Return Procedure list based on the status for each Procedure
    # @option opts [Boolean] :template Used to get Procedure template list (default to false)
    # @option opts [Array<String>] :members Get Procedure list for given members (paraph mode)
    # @option opts [String] :items_per_page Number of items per page for the pagination
    # @option opts [Boolean] :pagination Enable the pagination
    # @option opts [Integer] :page Page of the pagination
    # @option opts [String] :name Filter by name (contains)
    # @option opts [String] :members_firstname Filter by member firstname (contains)
    # @option opts [String] :members_lastname Filter by member lastname (contains)
    # @option opts [String] :members_phone Filter by member phone (contains)
    # @option opts [String] :members_email Filter by member email (contains)
    # @option opts [String] :files_name Filter by file name (contains)
    # @option opts [Array<Date>] :created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [String] :order_created_at Order by createdAt  order[createdAt]&#x3D;asc order[createdAt]&#x3D;desc
    # @return [Array<ProcedureOutput>]
    def procedures_get(opts = { })
      data, _status_code, _headers = procedures_get_with_http_info(opts)
      data
    end

    # Get Procedure list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Return Procedure list based on the status for each Procedure
    # @option opts [Boolean] :template Used to get Procedure template list
    # @option opts [Array<String>] :members Get Procedure list for given members (paraph mode)
    # @option opts [String] :items_per_page Number of items per page for the pagination
    # @option opts [Boolean] :pagination Enable the pagination
    # @option opts [Integer] :page Page of the pagination
    # @option opts [String] :name Filter by name (contains)
    # @option opts [String] :members_firstname Filter by member firstname (contains)
    # @option opts [String] :members_lastname Filter by member lastname (contains)
    # @option opts [String] :members_phone Filter by member phone (contains)
    # @option opts [String] :members_email Filter by member email (contains)
    # @option opts [String] :files_name Filter by file name (contains)
    # @option opts [Array<Date>] :created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18
    # @option opts [Array<Date>] :deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18
    # @option opts [String] :order_created_at Order by createdAt  order[createdAt]&#x3D;asc order[createdAt]&#x3D;desc
    # @return [Array<(Array<ProcedureOutput>, Integer, Hash)>] Array<ProcedureOutput> data, response status code and response headers
    def procedures_get_with_http_info(opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_get ...'
      end
      allowable_values = %w[active finished expired refused draft]
      if @api_client.config.client_side_validation && opts[:status] && !allowable_values.include?(opts[:status])
        raise ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order_created_at] && !allowable_values.include?(opts[:order_created_at])
        raise ArgumentError, "invalid value for \"order_created_at\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/procedures'

      # query parameters
      query_params = opts[:query_params] || { }
      query_params[:status] = opts[:status] unless opts[:status].nil?
      query_params[:template] = opts[:template] unless opts[:template].nil?
      query_params[:members] = @api_client.build_collection_param(opts[:members], :csv) unless opts[:members].nil?
      query_params[:itemsPerPage] = opts[:items_per_page] unless opts[:items_per_page].nil?
      query_params[:pagination] = opts[:pagination] unless opts[:pagination].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:name] = opts[:name] unless opts[:name].nil?
      query_params[:'members.firstname'] = opts[:members_firstname] unless opts[:members_firstname].nil?
      query_params[:'members.lastname'] = opts[:members_lastname] unless opts[:members_lastname].nil?
      query_params[:'members.phone'] = opts[:members_phone] unless opts[:members_phone].nil?
      query_params[:'members.email'] = opts[:members_email] unless opts[:members_email].nil?
      query_params[:'files.name'] = opts[:files_name] unless opts[:files_name].nil?
      query_params[:createdAt] = @api_client.build_collection_param(opts[:created_at], :csv) unless opts[:created_at].nil?
      query_params[:updatedAt] = @api_client.build_collection_param(opts[:updated_at], :csv) unless opts[:updated_at].nil?
      query_params[:expiresAt] = @api_client.build_collection_param(opts[:expires_at], :csv) unless opts[:expires_at].nil?
      query_params[:deletedAt] = @api_client.build_collection_param(opts[:deleted_at], :csv) unless opts[:deleted_at].nil?
      query_params[:'order[createdAt]'] = opts[:order_created_at] unless opts[:order_created_at].nil?

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProcedureOutput>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_get',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete a Procedure
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def procedures_id_delete(id, opts = { })
      procedures_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Procedure
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def procedures_id_delete_with_http_info(id, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling ProceduresApi.procedures_id_delete"
      end

      # resource path
      local_var_path = '/procedures/{id}'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_id_delete',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Duplicate a Procedure
    # @param id [String]
    # @param body [ProcedureDuplicateInput]
    # @param [Hash] opts the optional parameters
    # @return [ProcedureOutput]
    def procedures_id_duplicate_post(id, body, opts = { })
      data, _status_code, _headers = procedures_id_duplicate_post_with_http_info(id, body, opts)
      data
    end

    # Duplicate a Procedure
    # @param id [String]
    # @param body [ProcedureDuplicateInput]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcedureOutput, Integer, Hash)>] ProcedureOutput data, response status code and response headers
    def procedures_id_duplicate_post_with_http_info(id, body, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_id_duplicate_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling ProceduresApi.procedures_id_duplicate_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError, "Missing the required parameter 'body' when calling ProceduresApi.procedures_id_duplicate_post"
      end

      # resource path
      local_var_path = '/procedures/{id}/duplicate'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProcedureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_id_duplicate_post',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_id_duplicate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Find a Procedure by ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [ProcedureOutput]
    def procedures_id_get(id, opts = { })
      data, _status_code, _headers = procedures_id_get_with_http_info(id, opts)
      data
    end

    # Find a Procedure by ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcedureOutput, Integer, Hash)>] ProcedureOutput data, response status code and response headers
    def procedures_id_get_with_http_info(id, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling ProceduresApi.procedures_id_get"
      end

      # resource path
      local_var_path = '/procedures/{id}'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProcedureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_id_get',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get a Procedure proof file
    # Get a Procedure proof file
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [String]
    def procedures_id_proof_get(id, opts = { })
      data, _status_code, _headers = procedures_id_proof_get_with_http_info(id, opts)
      data
    end

    # Get a Procedure proof file
    # Get a Procedure proof file
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def procedures_id_proof_get_with_http_info(id, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_id_proof_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling ProceduresApi.procedures_id_proof_get"
      end

      # resource path
      local_var_path = '/procedures/{id}/proof'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_id_proof_get',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_id_proof_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update a Procedure
    # @param id [String]
    # @param body [ProcedureInput]
    # @param [Hash] opts the optional parameters
    # @return [ProcedureOutput]
    def procedures_id_put(id, body, opts = { })
      data, _status_code, _headers = procedures_id_put_with_http_info(id, body, opts)
      data
    end

    # Update a Procedure
    # @param id [String]
    # @param body [ProcedureInput]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcedureOutput, Integer, Hash)>] ProcedureOutput data, response status code and response headers
    def procedures_id_put_with_http_info(id, body, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling ProceduresApi.procedures_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError, "Missing the required parameter 'body' when calling ProceduresApi.procedures_id_put"
      end

      # resource path
      local_var_path = '/procedures/{id}'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProcedureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_id_put',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Remind a Procedure
    # @param id [String]
    # @param body [ProcedureRemindInput]
    # @param [Hash] opts the optional parameters
    # @return [ProcedureOutput]
    def procedures_id_remind_post(id, body, opts = { })
      data, _status_code, _headers = procedures_id_remind_post_with_http_info(id, body, opts)
      data
    end

    # Remind a Procedure
    # @param id [String]
    # @param body [ProcedureRemindInput]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcedureOutput, Integer, Hash)>] ProcedureOutput data, response status code and response headers
    def procedures_id_remind_post_with_http_info(id, body, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_id_remind_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling ProceduresApi.procedures_id_remind_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError, "Missing the required parameter 'body' when calling ProceduresApi.procedures_id_remind_post"
      end

      # resource path
      local_var_path = '/procedures/{id}/remind'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProcedureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_id_remind_post',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_id_remind_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create a new Procedure
    # @param body [ProcedureInput]
    # @param [Hash] opts the optional parameters
    # @return [ProcedureOutput]
    def procedures_post(body, opts = { })
      data, _status_code, _headers = procedures_post_with_http_info(body, opts)
      data
    end

    # Create a new Procedure
    # @param body [ProcedureInput]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcedureOutput, Integer, Hash)>] ProcedureOutput data, response status code and response headers
    def procedures_post_with_http_info(body, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProceduresApi.procedures_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError, "Missing the required parameter 'body' when calling ProceduresApi.procedures_post"
      end

      # resource path
      local_var_path = '/procedures'

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProcedureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'ProceduresApi.procedures_post',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProceduresApi#procedures_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
