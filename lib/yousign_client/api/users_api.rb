# frozen_string_literal: true

# #Yousign API Swagger
#
# For your information, the Yousign API documentation is available at https://dev.yousign.com/
#
# The version of the OpenAPI document: 2.1
# Contact: support@yousign.fr
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.4.0
#

require 'cgi'

module YousignClient
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List all Users
    # @param [Hash] opts the optional parameters
    # @return [Array<UserOutput>]
    def users_get(opts = { })
      data, _status_code, _headers = users_get_with_http_info(opts)
      data
    end

    # List all Users
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserOutput>, Integer, Hash)>] Array<UserOutput> data, response status code and response headers
    def users_get_with_http_info(opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_get ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserOutput>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'UsersApi.users_get',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete a User
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_id_delete(id, opts = { })
      users_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a User
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def users_id_delete_with_http_info(id, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_delete"
      end

      # resource path
      local_var_path = '/users/{id}'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'UsersApi.users_id_delete',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Find a User by ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [UserOutput]
    def users_id_get(id, opts = { })
      data, _status_code, _headers = users_id_get_with_http_info(id, opts)
      data
    end

    # Find a User by ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserOutput, Integer, Hash)>] UserOutput data, response status code and response headers
    def users_id_get_with_http_info(id, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_get"
      end

      # resource path
      local_var_path = '/users/{id}'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'UsersApi.users_id_get',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update a User
    # @param id [String]
    # @param body [UserInput]
    # @param [Hash] opts the optional parameters
    # @return [UserOutput]
    def users_id_put(id, body, opts = { })
      data, _status_code, _headers = users_id_put_with_http_info(id, body, opts)
      data
    end

    # Update a User
    # @param id [String]
    # @param body [UserInput]
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserOutput, Integer, Hash)>] UserOutput data, response status code and response headers
    def users_id_put_with_http_info(id, body, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError, "Missing the required parameter 'body' when calling UsersApi.users_id_put"
      end

      # resource path
      local_var_path = '/users/{id}'.sub('{id}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'UsersApi.users_id_put',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create a new User on Yousign application
    # @param body [UserInput]
    # @param [Hash] opts the optional parameters
    # @return [UserOutput]
    def users_post(body, opts = { })
      data, _status_code, _headers = users_post_with_http_info(body, opts)
      data
    end

    # Create a new User on Yousign application
    # @param body [UserInput]
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserOutput, Integer, Hash)>] UserOutput data, response status code and response headers
    def users_post_with_http_info(body, opts = { })
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError, "Missing the required parameter 'body' when calling UsersApi.users_post"
      end

      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || { }

      # header parameters
      header_params = opts[:header_params] || { }
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || { }

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        operation:     :'UsersApi.users_post',
        header_params: header_params,
        query_params:  query_params,
        form_params:   form_params,
        body:          post_body,
        auth_names:    auth_names,
        return_type:   return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
